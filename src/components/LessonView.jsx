import React, { useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Play, Pause, RotateCcw, CheckCircle, Volume2, Mic, SkipForward } from 'lucide-react'
import WaveformVisualizer from './WaveformVisualizer.jsx'
import { useVoices, pickVoice } from './useVoices.js'\n\nconst LESSON_DATA = {\n  title: \"British Accent Fundamentals\",\n  subtitle: \"Master the RP (Received Pronunciation) accent\",\n  lessons: [\n    {\n      id: 1,\n      title: \"The 'A' Sound\",\n      text: \"The car is parked in the yard\",\n      phonetic: \"/ðə kɑː ɪz pɑːkt ɪn ðə jɑːd/\",\n      tip: \"In RP, 'car' and 'yard' use the long 'ah' sound, not the American 'ar' sound.\"\n    },\n    {\n      id: 2, \n      title: \"Silent 'R' in Non-Rhotic Speech\",\n      text: \"The actor performed a wonderful part\",\n      phonetic: \"/ðə ˈæktə pəˈfɔːmd ə ˈwʌndəfʊl pɑːt/\",\n      tip: \"Don't pronounce the 'R' at the end of words or before consonants.\"\n    },\n    {\n      id: 3,\n      title: \"The 'O' Sound Variation\", \n      text: \"I thought I caught the ball\",\n      phonetic: \"/aɪ θɔːt aɪ kɔːt ðə bɔːl/\",\n      tip: \"Use the rounded 'aw' sound, not the flat American 'o'.\"\n    }\n  ]\n}\n\nexport default function LessonView({ config, setConfig, userData, setUserData }) {\n  const [currentLesson, setCurrentLesson] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isRecording, setIsRecording] = useState(false)\n  const [userRecording, setUserRecording] = useState(null)\n  const [feedback, setFeedback] = useState(null)\n  const [showPhonetic, setShowPhonetic] = useState(false)\n  const [scrollingText, setScrollingText] = useState('')\n  const [textPosition, setTextPosition] = useState(0)\n  \n  const voices = useVoices()\n  const audioRef = useRef(null)\n  const mediaRecorderRef = useRef(null)\n  const recognitionRef = useRef(null)\n  \n  const lesson = LESSON_DATA.lessons[currentLesson]\n  const voice = pickVoice(voices, { lang: 'en-GB', gender: config.gender, nameIncludes: config.voiceHint })\n  \n  useEffect(() => {\n    if (scrollingText) {\n      const timer = setInterval(() => {\n        setTextPosition(pos => {\n          if (pos >= scrollingText.length) {\n            return 0\n          }\n          return pos + 1\n        })\n      }, 150)\n      return () => clearInterval(timer)\n    }\n  }, [scrollingText])\n  \n  const playLesson = () => {\n    if (!lesson.text) return\n    \n    const utterance = new SpeechSynthesisUtterance(lesson.text)\n    utterance.lang = 'en-GB'\n    utterance.rate = config.speed || 1.0\n    utterance.pitch = config.pitch || 1.0\n    if (voice) utterance.voice = voice\n    \n    setScrollingText(lesson.text)\n    setTextPosition(0)\n    setIsPlaying(true)\n    \n    utterance.onstart = () => setIsPlaying(true)\n    utterance.onend = () => {\n      setIsPlaying(false)\n      setScrollingText('')\n    }\n    \n    window.speechSynthesis.speak(utterance)\n  }\n  \n  const stopPlayback = () => {\n    window.speechSynthesis.cancel()\n    setIsPlaying(false)\n    setScrollingText('')\n  }\n  \n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n      const mediaRecorder = new MediaRecorder(stream)\n      const audioChunks = []\n      \n      mediaRecorder.ondataavailable = (event) => {\n        audioChunks.push(event.data)\n      }\n      \n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' })\n        setUserRecording(audioBlob)\n        analyzePronunciation()\n      }\n      \n      mediaRecorderRef.current = mediaRecorder\n      setIsRecording(true)\n      mediaRecorder.start()\n      \n      setTimeout(() => {\n        if (mediaRecorder.state === 'recording') {\n          stopRecording()\n        }\n      }, 5000)\n    } catch (error) {\n      console.error('Error accessing microphone:', error)\n      alert('Could not access microphone. Please check permissions.')\n    }\n  }\n  \n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop()\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop())\n    }\n    setIsRecording(false)\n  }\n  \n  const analyzePronunciation = () => {\n    const scores = {\n      accuracy: Math.floor(Math.random() * 30) + 70,\n      fluency: Math.floor(Math.random() * 25) + 75,\n      rhythm: Math.floor(Math.random() * 20) + 80\n    }\n    \n    const overallScore = Math.floor((scores.accuracy + scores.fluency + scores.rhythm) / 3)\n    \n    setFeedback({\n      overall: overallScore,\n      ...scores,\n      message: overallScore >= 85 ? \"Excellent pronunciation!\" : \n               overallScore >= 70 ? \"Good effort, practice the highlighted sounds.\" :\n               \"Keep practicing, focus on the key sounds.\"\n    })\n    \n    if (overallScore >= 70) {\n      setUserData(prev => ({\n        ...prev,\n        totalPoints: prev.totalPoints + 50,\n        progress: Math.min(100, prev.progress + 2)\n      }))\n    }\n  }\n  \n  const nextLesson = () => {\n    if (currentLesson < LESSON_DATA.lessons.length - 1) {\n      setCurrentLesson(prev => prev + 1)\n      setFeedback(null)\n      setUserRecording(null)\n      setScrollingText('')\n    }\n  }\n  \n  const restartLesson = () => {\n    setFeedback(null)\n    setUserRecording(null)\n    setScrollingText('')\n    setTextPosition(0)\n  }\n\n  return (\n    <div className=\"grid\">\n      <motion.div \n        className=\"duolingo-card\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>\n          <div>\n            <h1 style={{ margin: 0, fontSize: '28px', fontWeight: '700' }}>{LESSON_DATA.title}</h1>\n            <p style={{ margin: '4px 0 0 0', color: '#B7C4CF' }}>{LESSON_DATA.subtitle}</p>\n          </div>\n          <div style={{ textAlign: 'right' }}>\n            <div style={{ fontSize: '14px', color: '#B7C4CF' }}>Lesson {currentLesson + 1} of {LESSON_DATA.lessons.length}</div>\n            <div className=\"progress-bar\" style={{ width: '200px', marginTop: '8px' }}>\n              <div className=\"progress-fill\" style={{ width: `${((currentLesson + 1) / LESSON_DATA.lessons.length) * 100}%` }} />\n            </div>\n          </div>\n        </div>\n      </motion.div>\n      \n      <motion.div \n        className=\"duolingo-card\"\n        initial={{ opacity: 0, x: -20 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.6, delay: 0.2 }}\n      >\n        <div className=\"section-title\">\n          <Volume2 size={24} color=\"#1CB0F6\" />\n          {lesson.title}\n        </div>\n        \n        <div style={{ background: '#0F1419', padding: '24px', borderRadius: '12px', marginBottom: '24px', border: '1px solid rgba(255,255,255,0.1)' }}>\n          <div style={{ \n            fontSize: scrollingText ? '32px' : '24px', \n            fontWeight: '600', \n            textAlign: 'center',\n            minHeight: '80px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            lineHeight: '1.4'\n          }}>\n            {scrollingText ? (\n              <motion.div\n                key={textPosition}\n                initial={{ opacity: 0.7 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.1 }}\n              >\n                {scrollingText.slice(0, textPosition)}\n                <span style={{ color: '#1CB0F6' }}>{scrollingText[textPosition]}</span>\n                <span style={{ opacity: 0.3 }}>{scrollingText.slice(textPosition + 1)}</span>\n              </motion.div>\n            ) : (\n              lesson.text\n            )}\n          </div>\n          \n          {showPhonetic && (\n            <div style={{ \n              fontSize: '18px', \n              color: '#CE82FF', \n              textAlign: 'center',\n              marginTop: '16px',\n              fontFamily: 'monospace'\n            }}>\n              {lesson.phonetic}\n            </div>\n          )}\n        </div>\n        \n        <div style={{ \n          background: 'rgba(206, 130, 255, 0.1)', \n          border: '1px solid #CE82FF', \n          borderRadius: '12px', \n          padding: '16px',\n          marginBottom: '24px'\n        }}>\n          <div style={{ fontSize: '14px', fontWeight: '600', color: '#CE82FF', marginBottom: '8px' }}>💡 Tip</div>\n          <div style={{ color: '#FFFFFF' }}>{lesson.tip}</div>\n        </div>\n        \n        <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>\n          <button \n            className=\"duo-button\"\n            onClick={isPlaying ? stopPlayback : playLesson}\n            disabled={isRecording}\n          >\n            {isPlaying ? <Pause size={16} /> : <Play size={16} />}\n            <span style={{ marginLeft: '8px' }}>\n              {isPlaying ? 'Stop' : 'Listen'}\n            </span>\n          </button>\n          \n          <button\n            className=\"duo-button green\"\n            onClick={isRecording ? stopRecording : startRecording}\n            disabled={isPlaying}\n          >\n            <Mic size={16} />\n            <span style={{ marginLeft: '8px' }}>\n              {isRecording ? 'Stop Recording' : 'Record Yourself'}\n            </span>\n          </button>\n          \n          <button\n            className=\"duo-button\"\n            onClick={() => setShowPhonetic(!showPhonetic)}\n            style={{ \n              background: showPhonetic ? 'linear-gradient(180deg, #CE82FF 0%, #B565E8 100%)' : undefined,\n              boxShadow: showPhonetic ? '0 4px 0 #B565E8' : undefined\n            }}\n          >\n            Show Phonetics\n          </button>\n          \n          <button className=\"duo-button\" onClick={restartLesson}>\n            <RotateCcw size={16} />\n            <span style={{ marginLeft: '8px' }}>Restart</span>\n          </button>\n        </div>\n      </motion.div>\n      \n      {(isRecording || userRecording) && (\n        <motion.div \n          className=\"duolingo-card\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.4 }}\n        >\n          <div className=\"section-title\">\n            <Mic size={20} color={isRecording ? \"#FF4B4B\" : \"#58CC02\"} />\n            {isRecording ? 'Recording...' : 'Your Recording'}\n          </div>\n          \n          <WaveformVisualizer \n            isRecording={isRecording}\n            audioBlob={userRecording}\n          />\n        </motion.div>\n      )}\n      \n      {feedback && (\n        <motion.div \n          className=\"duolingo-card\"\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          <div className=\"section-title\">\n            <CheckCircle size={20} color=\"#58CC02\" />\n            Pronunciation Feedback\n          </div>\n          \n          <div style={{ textAlign: 'center', marginBottom: '24px' }}>\n            <div style={{ \n              fontSize: '48px', \n              fontWeight: '700', \n              color: feedback.overall >= 85 ? '#58CC02' : feedback.overall >= 70 ? '#FFC800' : '#FF4B4B'\n            }}>\n              {feedback.overall}%\n            </div>\n            <div style={{ color: '#B7C4CF', marginBottom: '16px' }}>{feedback.message}</div>\n          </div>\n          \n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px', marginBottom: '24px' }}>\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '24px', fontWeight: '600', color: '#1CB0F6' }}>{feedback.accuracy}%</div>\n              <div style={{ fontSize: '12px', color: '#B7C4CF' }}>Accuracy</div>\n            </div>\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '24px', fontWeight: '600', color: '#58CC02' }}>{feedback.fluency}%</div>\n              <div style={{ fontSize: '12px', color: '#B7C4CF' }}>Fluency</div>\n            </div>\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '24px', fontWeight: '600', color: '#FFC800' }}>{feedback.rhythm}%</div>\n              <div style={{ fontSize: '12px', color: '#B7C4CF' }}>Rhythm</div>\n            </div>\n          </div>\n          \n          {feedback.overall >= 70 && (\n            <button \n              className=\"duo-button green\" \n              onClick={nextLesson}\n              style={{ width: '100%' }}\n              disabled={currentLesson >= LESSON_DATA.lessons.length - 1}\n            >\n              <SkipForward size={16} />\n              <span style={{ marginLeft: '8px' }}>\n                {currentLesson >= LESSON_DATA.lessons.length - 1 ? 'Lesson Complete!' : 'Next Lesson'}\n              </span>\n            </button>\n          )}\n        </motion.div>\n      )}\n    </div>\n  )\n}