import React, { useState, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'\nimport { Upload, FileText, Search, Filter, Download, Trash2, Star, Eye, Plus, BookOpen } from 'lucide-react'\n\nconst SAMPLE_SCRIPTS = [\n  {\n    id: 1,\n    title: \"Romeo and Juliet\",\n    author: \"William Shakespeare\",\n    characters: [\"Romeo\", \"Juliet\", \"Mercutio\", \"Nurse\", \"Friar Lawrence\"],\n    extractedLines: 47,\n    uploadDate: \"2024-01-15\",\n    tags: [\"tragedy\", \"romance\", \"shakespeare\"],\n    status: \"processed\"\n  },\n  {\n    id: 2,\n    title: \"Hamlet\",\n    author: \"William Shakespeare\", \n    characters: [\"Hamlet\", \"Ophelia\", \"Claudius\", \"Gertrude\", \"Polonius\"],\n    extractedLines: 62,\n    uploadDate: \"2024-01-12\",\n    tags: [\"tragedy\", \"shakespeare\", \"philosophical\"],\n    status: \"processed\"\n  },\n  {\n    id: 3,\n    title: \"The Importance of Being Earnest\",\n    author: \"Oscar Wilde\",\n    characters: [\"Algernon\", \"Jack\", \"Gwendolen\", \"Cecily\"],\n    extractedLines: 31,\n    uploadDate: \"2024-01-10\",\n    tags: [\"comedy\", \"victorian\", \"wilde\"],\n    status: \"processed\"\n  }\n]\n\nconst SAMPLE_EXTRACTED_LINES = {\n  1: [\n    {\n      id: 101,\n      character: \"Romeo\",\n      act: \"Act II\",\n      scene: \"Scene 2\",\n      lineNumber: 2,\n      text: \"But soft, what light through yonder window breaks? It is the east, and Juliet is the sun.\",\n      saved: true,\n      difficulty: \"intermediate\"\n    },\n    {\n      id: 102,\n      character: \"Juliet\",\n      act: \"Act II\",\n      scene: \"Scene 2\", \n      lineNumber: 25,\n      text: \"O Romeo, Romeo, wherefore art thou Romeo? Deny thy father and refuse thy name.\",\n      saved: false,\n      difficulty: \"intermediate\"\n    },\n    {\n      id: 103,\n      character: \"Mercutio\",\n      act: \"Act I\",\n      scene: \"Scene 4\",\n      lineNumber: 53,\n      text: \"O, then I see Queen Mab hath been with you. She is the fairies' midwife.\",\n      saved: true,\n      difficulty: \"advanced\"\n    }\n  ],\n  2: [\n    {\n      id: 201,\n      character: \"Hamlet\",\n      act: \"Act III\",\n      scene: \"Scene 1\",\n      lineNumber: 56,\n      text: \"To be or not to be, that is the question: Whether 'tis nobler in the mind to suffer the slings and arrows of outrageous fortune.\",\n      saved: true,\n      difficulty: \"advanced\"\n    }\n  ],\n  3: [\n    {\n      id: 301,\n      character: \"Algernon\",\n      act: \"Act I\",\n      scene: \"Scene 1\",\n      lineNumber: 1,\n      text: \"Did you hear what I was playing, Lane?\",\n      saved: false,\n      difficulty: \"beginner\"\n    }\n  ]\n}\n\nexport default function ScriptManager({ userData, setUserData }) {\n  const [scripts, setScripts] = useState(SAMPLE_SCRIPTS)\n  const [selectedScript, setSelectedScript] = useState(null)\n  const [extractedLines, setExtractedLines] = useState(SAMPLE_EXTRACTED_LINES)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filterCharacter, setFilterCharacter] = useState('all')\n  const [filterDifficulty, setFilterDifficulty] = useState('all')\n  const [showUpload, setShowUpload] = useState(false)\n  const [uploadProgress, setUploadProgress] = useState(0)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const fileInputRef = useRef(null)\n  \n  const filteredScripts = scripts.filter(script => \n    script.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    script.author.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n  \n  const getFilteredLines = () => {\n    if (!selectedScript) return []\n    \n    let lines = extractedLines[selectedScript.id] || []\n    \n    if (searchTerm) {\n      lines = lines.filter(line => \n        line.text.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        line.character.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n    \n    if (filterCharacter !== 'all') {\n      lines = lines.filter(line => line.character === filterCharacter)\n    }\n    \n    if (filterDifficulty !== 'all') {\n      lines = lines.filter(line => line.difficulty === filterDifficulty)\n    }\n    \n    return lines\n  }\n  \n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0]\n    if (!file) return\n    \n    setIsProcessing(true)\n    setUploadProgress(0)\n    \n    // Simulate file processing\n    const progressInterval = setInterval(() => {\n      setUploadProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(progressInterval)\n          processFile(file)\n          return 100\n        }\n        return prev + 10\n      })\n    }, 200)\n  }\n  \n  const processFile = (file) => {\n    // Simulate PDF processing and character extraction\n    setTimeout(() => {\n      const newScript = {\n        id: Date.now(),\n        title: file.name.replace('.pdf', ''),\n        author: \"Unknown\",\n        characters: [\"Character 1\", \"Character 2\", \"Character 3\"],\n        extractedLines: Math.floor(Math.random() * 50) + 20,\n        uploadDate: new Date().toISOString().split('T')[0],\n        tags: [\"uploaded\", \"custom\"],\n        status: \"processed\"\n      }\n      \n      setScripts(prev => [newScript, ...prev])\n      setIsProcessing(false)\n      setShowUpload(false)\n      setUploadProgress(0)\n      \n      // Generate some sample extracted lines for the new script\n      setExtractedLines(prev => ({\n        ...prev,\n        [newScript.id]: [\n          {\n            id: Date.now() + 1,\n            character: \"Character 1\",\n            act: \"Act I\",\n            scene: \"Scene 1\",\n            lineNumber: 1,\n            text: \"This is a sample extracted line from your uploaded script.\",\n            saved: false,\n            difficulty: \"intermediate\"\n          }\n        ]\n      }))\n    }, 1000)\n  }\n  \n  const saveLine = (lineId) => {\n    setExtractedLines(prev => ({\n      ...prev,\n      [selectedScript.id]: prev[selectedScript.id].map(line => \n        line.id === lineId ? { ...line, saved: !line.saved } : line\n      )\n    }))\n  }\n  \n  const deleteScript = (scriptId) => {\n    setScripts(prev => prev.filter(s => s.id !== scriptId))\n    if (selectedScript?.id === scriptId) {\n      setSelectedScript(null)\n    }\n    delete extractedLines[scriptId]\n  }\n  \n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case 'beginner': return '#58CC02'\n      case 'intermediate': return '#FFC800'\n      case 'advanced': return '#FF4B4B'\n      default: return '#1CB0F6'\n    }\n  }\n\n  return (\n    <div className=\"grid\">\n      <motion.div \n        className=\"duolingo-card\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>\n          <div>\n            <h1 style={{ margin: 0, fontSize: '28px', fontWeight: '700' }}>Script Manager</h1>\n            <p style={{ margin: '4px 0 0 0', color: '#B7C4CF' }}>Upload and organize your scripts and plays</p>\n          </div>\n          <button \n            className=\"duo-button green\"\n            onClick={() => setShowUpload(!showUpload)}\n          >\n            <Upload size={16} />\n            <span style={{ marginLeft: '8px' }}>Upload Script</span>\n          </button>\n        </div>\n        \n        <AnimatePresence>\n          {showUpload && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.3 }}\n              style={{ marginBottom: '24px' }}\n            >\n              <div style={{ \n                background: 'rgba(88, 204, 2, 0.1)', \n                border: '1px solid #58CC02', \n                borderRadius: '12px', \n                padding: '20px',\n                textAlign: 'center'\n              }}>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".pdf,.txt,.doc,.docx\"\n                  onChange={handleFileUpload}\n                  style={{ display: 'none' }}\n                />\n                \n                {!isProcessing ? (\n                  <>\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>üìÑ</div>\n                    <div style={{ fontSize: '18px', fontWeight: '600', marginBottom: '8px', color: '#FFFFFF' }}>\n                      Upload Your Script\n                    </div>\n                    <div style={{ color: '#B7C4CF', marginBottom: '20px' }}>\n                      Support for PDF, TXT, DOC, and DOCX files\n                    </div>\n                    <button \n                      className=\"duo-button green\"\n                      onClick={() => fileInputRef.current?.click()}\n                    >\n                      <FileText size={16} />\n                      <span style={{ marginLeft: '8px' }}>Choose File</span>\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>‚öôÔ∏è</div>\n                    <div style={{ fontSize: '18px', fontWeight: '600', marginBottom: '8px', color: '#FFFFFF' }}>\n                      Processing Script...\n                    </div>\n                    <div style={{ color: '#B7C4CF', marginBottom: '20px' }}>\n                      Extracting characters and organizing lines\n                    </div>\n                    <div className=\"progress-bar\" style={{ maxWidth: '300px', margin: '0 auto' }}>\n                      <div className=\"progress-fill\" style={{ width: `${uploadProgress}%` }} />\n                    </div>\n                    <div style={{ color: '#58CC02', marginTop: '8px', fontSize: '14px', fontWeight: '600' }}>\n                      {uploadProgress}% Complete\n                    </div>\n                  </>\n                )}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n        \n        <div style={{ marginBottom: '24px' }}>\n          <div className=\"input-field\" style={{ position: 'relative' }}>\n            <Search size={20} style={{ \n              position: 'absolute', \n              left: '16px', \n              top: '50%', \n              transform: 'translateY(-50%)', \n              color: '#8B9BA8' \n            }} />\n            <input\n              type=\"text\"\n              placeholder=\"Search scripts...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              style={{ \n                paddingLeft: '48px', \n                background: 'transparent', \n                border: 'none',\n                color: '#FFFFFF',\n                width: '100%'\n              }}\n            />\n          </div>\n        </div>\n      </motion.div>\n      \n      <div className=\"grid two-col\">\n        <motion.div \n          className=\"duolingo-card\"\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n        >\n          <div className=\"section-title\">\n            <BookOpen size={20} color=\"#1CB0F6\" />\n            Your Scripts ({filteredScripts.length})\n          </div>\n          \n          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', maxHeight: '500px', overflowY: 'auto' }}>\n            {filteredScripts.map((script) => (\n              <motion.div\n                key={script.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                style={{\n                  padding: '16px',\n                  background: selectedScript?.id === script.id ? 'rgba(28, 176, 246, 0.2)' : 'rgba(255, 255, 255, 0.05)',\n                  border: `1px solid ${selectedScript?.id === script.id ? '#1CB0F6' : 'rgba(255, 255, 255, 0.1)'}`,\n                  borderRadius: '12px',\n                  cursor: 'pointer',\n                  transition: 'all 0.2s ease'\n                }}\n                onClick={() => setSelectedScript(script)}\n              >\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>\n                  <div>\n                    <div style={{ fontWeight: '600', fontSize: '16px', color: '#FFFFFF', marginBottom: '4px' }}>\n                      {script.title}\n                    </div>\n                    <div style={{ color: '#B7C4CF', fontSize: '14px', marginBottom: '8px' }}>\n                      by {script.author}\n                    </div>\n                  </div>\n                  <div style={{ display: 'flex', gap: '8px' }}>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        setSelectedScript(script)\n                      }}\n                      style={{ background: 'transparent', border: 'none', cursor: 'pointer', color: '#1CB0F6' }}\n                    >\n                      <Eye size={16} />\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        deleteScript(script.id)\n                      }}\n                      style={{ background: 'transparent', border: 'none', cursor: 'pointer', color: '#FF4B4B' }}\n                    >\n                      <Trash2 size={16} />\n                    </button>\n                  </div>\n                </div>\n                \n                <div style={{ display: 'flex', gap: '6px', flexWrap: 'wrap', marginBottom: '8px' }}>\n                  {script.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      style={{\n                        background: 'rgba(255, 255, 255, 0.1)',\n                        color: '#B7C4CF',\n                        padding: '2px 8px',\n                        borderRadius: '8px',\n                        fontSize: '11px'\n                      }}\n                    >\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n                \n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', fontSize: '12px', color: '#8B9BA8' }}>\n                  <span>{script.extractedLines} lines extracted</span>\n                  <span>Uploaded {script.uploadDate}</span>\n                </div>\n              </motion.div>\n            ))}\n            \n            {filteredScripts.length === 0 && (\n              <div style={{ textAlign: 'center', padding: '40px', color: '#8B9BA8' }}>\n                <FileText size={48} style={{ marginBottom: '16px', opacity: 0.5 }} />\n                <div>No scripts found</div>\n                <div style={{ fontSize: '14px', marginTop: '8px' }}>Upload a script to get started</div>\n              </div>\n            )}\n          </div>\n        </motion.div>\n        \n        <motion.div \n          className=\"duolingo-card\"\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n        >\n          {selectedScript ? (\n            <>\n              <div className=\"section-title\">\n                <Star size={20} color=\"#FFC800\" />\n                Lines from \"{selectedScript.title}\"\n              </div>\n              \n              <div style={{ display: 'flex', gap: '8px', marginBottom: '16px', flexWrap: 'wrap' }}>\n                <select\n                  className=\"input-field\"\n                  value={filterCharacter}\n                  onChange={(e) => setFilterCharacter(e.target.value)}\n                  style={{ flex: 1, minWidth: '120px', padding: '8px' }}\n                >\n                  <option value=\"all\">All Characters</option>\n                  {selectedScript.characters.map(char => (\n                    <option key={char} value={char}>{char}</option>\n                  ))}\n                </select>\n                <select\n                  className=\"input-field\"\n                  value={filterDifficulty}\n                  onChange={(e) => setFilterDifficulty(e.target.value)}\n                  style={{ flex: 1, minWidth: '120px', padding: '8px' }}\n                >\n                  <option value=\"all\">All Levels</option>\n                  <option value=\"beginner\">Beginner</option>\n                  <option value=\"intermediate\">Intermediate</option>\n                  <option value=\"advanced\">Advanced</option>\n                </select>\n              </div>\n              \n              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', maxHeight: '400px', overflowY: 'auto' }}>\n                {getFilteredLines().map((line) => (\n                  <motion.div\n                    key={line.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.3 }}\n                    style={{\n                      padding: '16px',\n                      background: 'rgba(255, 255, 255, 0.05)',\n                      border: '1px solid rgba(255, 255, 255, 0.1)',\n                      borderRadius: '12px'\n                    }}\n                  >\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>\n                      <div>\n                        <div style={{ display: 'flex', gap: '8px', alignItems: 'center', marginBottom: '4px' }}>\n                          <span style={{\n                            background: getDifficultyColor(line.difficulty),\n                            color: 'white',\n                            padding: '2px 8px',\n                            borderRadius: '8px',\n                            fontSize: '11px',\n                            fontWeight: '600'\n                          }}>\n                            {line.difficulty.toUpperCase()}\n                          </span>\n                          <span style={{ color: '#B7C4CF', fontSize: '12px' }}>\n                            {line.character} ‚Ä¢ {line.act} {line.scene}\n                          </span>\n                        </div>\n                      </div>\n                      <button\n                        onClick={() => saveLine(line.id)}\n                        style={{\n                          background: 'transparent',\n                          border: 'none',\n                          cursor: 'pointer',\n                          color: line.saved ? '#FFC800' : '#8B9BA8'\n                        }}\n                      >\n                        <Star size={16} fill={line.saved ? '#FFC800' : 'none'} />\n                      </button>\n                    </div>\n                    \n                    <div style={{ \n                      fontSize: '14px', \n                      lineHeight: '1.5', \n                      color: '#FFFFFF',\n                      fontStyle: 'italic',\n                      marginBottom: '8px'\n                    }}>\n                      \"{line.text}\"\n                    </div>\n                    \n                    <div style={{ fontSize: '11px', color: '#8B9BA8' }}>\n                      Line {line.lineNumber}\n                    </div>\n                  </motion.div>\n                ))}\n                \n                {getFilteredLines().length === 0 && (\n                  <div style={{ textAlign: 'center', padding: '40px', color: '#8B9BA8' }}>\n                    <Search size={32} style={{ marginBottom: '12px', opacity: 0.5 }} />\n                    <div>No lines found</div>\n                    <div style={{ fontSize: '12px', marginTop: '4px' }}>Try adjusting your filters</div>\n                  </div>\n                )}\n              </div>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '60px 20px', color: '#8B9BA8' }}>\n              <FileText size={64} style={{ marginBottom: '20px', opacity: 0.3 }} />\n              <div style={{ fontSize: '18px', marginBottom: '8px' }}>Select a Script</div>\n              <div style={{ fontSize: '14px' }}>Choose a script from the left to view extracted lines</div>\n            </div>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  )\n}