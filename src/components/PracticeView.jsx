import React, { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'\nimport { Play, Pause, Mic, Save, Trash2, Star, Volume2, RotateCcw, ChevronRight, ChevronLeft } from 'lucide-react'
import WaveformVisualizer from './WaveformVisualizer.jsx'
import { useVoices, pickVoice } from './useVoices.js'\n\nconst SAMPLE_LINES = [\n  {\n    id: 1,\n    character: \"Romeo\",\n    act: \"Act II\",\n    scene: \"Scene 2\",\n    text: \"But soft, what light through yonder window breaks? It is the east, and Juliet is the sun.\",\n    difficulty: \"intermediate\",\n    saved: true,\n    tags: [\"romantic\", \"soliloquy\"]\n  },\n  {\n    id: 2,\n    character: \"Hamlet\",\n    act: \"Act III\",\n    scene: \"Scene 1\", \n    text: \"To be or not to be, that is the question: Whether 'tis nobler in the mind to suffer...\",\n    difficulty: \"advanced\",\n    saved: false,\n    tags: [\"philosophical\", \"soliloquy\"]\n  },\n  {\n    id: 3,\n    character: \"Lady Macbeth\",\n    act: \"Act I\",\n    scene: \"Scene 5\",\n    text: \"Come, you spirits that tend on mortal thoughts, unsex me here, and fill me from the crown to the toe, top-full of direst cruelty.\",\n    difficulty: \"advanced\",\n    saved: true,\n    tags: [\"dark\", \"ambition\"]\n  }\n]\n\nexport default function PracticeView({ config, userData, setUserData }) {\n  const [currentLine, setCurrentLine] = useState(0)\n  const [lines, setLines] = useState(SAMPLE_LINES)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isRecording, setIsRecording] = useState(false)\n  const [userRecording, setUserRecording] = useState(null)\n  const [practiceMode, setPracticeMode] = useState('individual') // 'individual' or 'sequence'\n  const [showTranscript, setShowTranscript] = useState(false)\n  const [feedback, setFeedback] = useState(null)\n  const [customText, setCustomText] = useState('')\n  const [showCustomInput, setShowCustomInput] = useState(false)\n  \n  const voices = useVoices()\n  const mediaRecorderRef = useRef(null)\n  const line = lines[currentLine]\n  const voice = pickVoice(voices, { lang: 'en-GB', gender: config.gender, nameIncludes: config.voiceHint })\n  \n  const speakLine = (text) => {\n    if (!text) return\n    \n    const utterance = new SpeechSynthesisUtterance(text)\n    utterance.lang = 'en-GB'\n    utterance.rate = config.speed || 0.9\n    utterance.pitch = config.pitch || 1.0\n    if (voice) utterance.voice = voice\n    \n    setIsPlaying(true)\n    utterance.onstart = () => setIsPlaying(true)\n    utterance.onend = () => setIsPlaying(false)\n    \n    window.speechSynthesis.speak(utterance)\n  }\n  \n  const stopPlayback = () => {\n    window.speechSynthesis.cancel()\n    setIsPlaying(false)\n  }\n  \n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n      const mediaRecorder = new MediaRecorder(stream)\n      const audioChunks = []\n      \n      mediaRecorder.ondataavailable = (event) => {\n        audioChunks.push(event.data)\n      }\n      \n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' })\n        setUserRecording(audioBlob)\n        analyzePronunciation()\n      }\n      \n      mediaRecorderRef.current = mediaRecorder\n      setIsRecording(true)\n      mediaRecorder.start()\n      \n      setTimeout(() => {\n        if (mediaRecorder.state === 'recording') {\n          stopRecording()\n        }\n      }, 10000) // 10 second max recording\n    } catch (error) {\n      console.error('Error accessing microphone:', error)\n      alert('Could not access microphone. Please check permissions.')\n    }\n  }\n  \n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop()\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop())\n    }\n    setIsRecording(false)\n  }\n  \n  const analyzePronunciation = () => {\n    // Simulate pronunciation analysis\n    const scores = {\n      accuracy: Math.floor(Math.random() * 30) + 70,\n      rhythm: Math.floor(Math.random() * 25) + 75,\n      emotion: Math.floor(Math.random() * 20) + 80\n    }\n    \n    const overallScore = Math.floor((scores.accuracy + scores.rhythm + scores.emotion) / 3)\n    \n    setFeedback({\n      overall: overallScore,\n      ...scores,\n      message: overallScore >= 85 ? \"Excellent performance! Your British accent is spot on.\" : \n               overallScore >= 70 ? \"Good work! Focus on the rhythm and emotional delivery.\" :\n               \"Keep practicing! Pay attention to the accent and pacing.\"\n    })\n    \n    if (overallScore >= 70) {\n      setUserData(prev => ({\n        ...prev,\n        totalPoints: prev.totalPoints + 25,\n        progress: Math.min(100, prev.progress + 1)\n      }))\n    }\n  }\n  \n  const saveLine = (lineId) => {\n    setLines(prev => prev.map(l => \n      l.id === lineId ? { ...l, saved: !l.saved } : l\n    ))\n    \n    const updatedLine = lines.find(l => l.id === lineId)\n    if (!updatedLine.saved) {\n      setUserData(prev => ({\n        ...prev,\n        savedLines: [...prev.savedLines, lineId]\n      }))\n    }\n  }\n  \n  const nextLine = () => {\n    if (currentLine < lines.length - 1) {\n      setCurrentLine(prev => prev + 1)\n      resetPracticeState()\n    }\n  }\n  \n  const prevLine = () => {\n    if (currentLine > 0) {\n      setCurrentLine(prev => prev - 1)\n      resetPracticeState()\n    }\n  }\n  \n  const resetPracticeState = () => {\n    setUserRecording(null)\n    setFeedback(null)\n    setIsPlaying(false)\n    setIsRecording(false)\n  }\n  \n  const addCustomLine = () => {\n    if (!customText.trim()) return\n    \n    const newLine = {\n      id: Date.now(),\n      character: \"Custom\",\n      act: \"Custom\",\n      scene: \"Practice\",\n      text: customText.trim(),\n      difficulty: \"custom\",\n      saved: false,\n      tags: [\"custom\"]\n    }\n    \n    setLines(prev => [...prev, newLine])\n    setCustomText('')\n    setShowCustomInput(false)\n    setCurrentLine(lines.length) // Navigate to the new line\n  }\n  \n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case 'beginner': return '#58CC02'\n      case 'intermediate': return '#FFC800'\n      case 'advanced': return '#FF4B4B'\n      case 'custom': return '#CE82FF'\n      default: return '#1CB0F6'\n    }\n  }\n\n  return (\n    <div className=\"grid\">\n      <motion.div \n        className=\"duolingo-card\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>\n          <div>\n            <h1 style={{ margin: 0, fontSize: '28px', fontWeight: '700' }}>Line Practice</h1>\n            <p style={{ margin: '4px 0 0 0', color: '#B7C4CF' }}>Perfect your British accent with classic lines</p>\n          </div>\n          <div style={{ display: 'flex', gap: '12px' }}>\n            <button\n              className=\"duo-button\"\n              onClick={() => setShowCustomInput(!showCustomInput)}\n              style={{ padding: '8px 16px', fontSize: '14px' }}\n            >\n              Add Custom Line\n            </button>\n          </div>\n        </div>\n        \n        <AnimatePresence>\n          {showCustomInput && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.3 }}\n              style={{ marginBottom: '24px' }}\n            >\n              <div style={{ \n                background: 'rgba(28, 176, 246, 0.1)', \n                border: '1px solid #1CB0F6', \n                borderRadius: '12px', \n                padding: '16px' \n              }}>\n                <textarea\n                  className=\"input-field textarea-field\"\n                  value={customText}\n                  onChange={(e) => setCustomText(e.target.value)}\n                  placeholder=\"Enter your custom line to practice...\"\n                  style={{ marginBottom: '12px' }}\n                />\n                <div style={{ display: 'flex', gap: '8px' }}>\n                  <button className=\"duo-button green\" onClick={addCustomLine}>\n                    <Save size={16} />\n                    <span style={{ marginLeft: '8px' }}>Add Line</span>\n                  </button>\n                  <button \n                    className=\"duo-button\" \n                    onClick={() => setShowCustomInput(false)}\n                    style={{ background: 'transparent', border: '1px solid rgba(255,255,255,0.3)' }}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n      \n      <div className=\"grid two-col\">\n        <motion.div \n          className=\"duolingo-card\"\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n            <div className=\"section-title\">\n              <Volume2 size={20} color=\"#1CB0F6\" />\n              {line?.character || 'Practice Line'}\n            </div>\n            <div style={{ display: 'flex', gap: '8px' }}>\n              <button\n                className=\"duo-button\"\n                onClick={prevLine}\n                disabled={currentLine === 0}\n                style={{ padding: '8px', fontSize: '12px' }}\n              >\n                <ChevronLeft size={16} />\n              </button>\n              <span style={{ \n                color: '#B7C4CF', \n                fontSize: '14px', \n                display: 'flex', \n                alignItems: 'center',\n                padding: '0 8px'\n              }}>\n                {currentLine + 1} / {lines.length}\n              </span>\n              <button\n                className=\"duo-button\"\n                onClick={nextLine}\n                disabled={currentLine === lines.length - 1}\n                style={{ padding: '8px', fontSize: '12px' }}\n              >\n                <ChevronRight size={16} />\n              </button>\n            </div>\n          </div>\n          \n          {line && (\n            <>\n              <div style={{ marginBottom: '16px' }}>\n                <div style={{ display: 'flex', gap: '8px', marginBottom: '8px', alignItems: 'center' }}>\n                  <span style={{\n                    background: getDifficultyColor(line.difficulty),\n                    color: 'white',\n                    padding: '4px 8px',\n                    borderRadius: '12px',\n                    fontSize: '12px',\n                    fontWeight: '600'\n                  }}>\n                    {line.difficulty.toUpperCase()}\n                  </span>\n                  <span style={{ color: '#B7C4CF', fontSize: '14px' }}>\n                    {line.act} • {line.scene}\n                  </span>\n                  <button\n                    onClick={() => saveLine(line.id)}\n                    style={{\n                      background: 'transparent',\n                      border: 'none',\n                      cursor: 'pointer',\n                      color: line.saved ? '#FFC800' : '#8B9BA8',\n                      marginLeft: 'auto'\n                    }}\n                  >\n                    <Star size={16} fill={line.saved ? '#FFC800' : 'none'} />\n                  </button>\n                </div>\n                <div style={{ display: 'flex', gap: '6px', flexWrap: 'wrap' }}>\n                  {line.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      style={{\n                        background: 'rgba(255, 255, 255, 0.1)',\n                        color: '#B7C4CF',\n                        padding: '2px 8px',\n                        borderRadius: '8px',\n                        fontSize: '11px'\n                      }}\n                    >\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div style={{\n                background: '#0F1419',\n                padding: '20px',\n                borderRadius: '12px',\n                marginBottom: '20px',\n                border: '1px solid rgba(255,255,255,0.1)',\n                position: 'relative'\n              }}>\n                <div style={{\n                  fontSize: '18px',\n                  lineHeight: '1.6',\n                  fontStyle: 'italic',\n                  textAlign: showTranscript ? 'left' : 'center'\n                }}>\n                  {showTranscript ? (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      "{line.text}"\n                    </motion.div>\n                  ) : (\n                    <div style={{ color: '#8B9BA8' }}>\n                      Click \"Show Text\" to reveal the line\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n                <button\n                  className=\"duo-button\"\n                  onClick={isPlaying ? stopPlayback : () => speakLine(line.text)}\n                  disabled={isRecording}\n                >\n                  {isPlaying ? <Pause size={16} /> : <Play size={16} />}\n                  <span style={{ marginLeft: '8px' }}>\n                    {isPlaying ? 'Stop' : 'Listen'}\n                  </span>\n                </button>\n                \n                <button\n                  className=\"duo-button green\"\n                  onClick={isRecording ? stopRecording : startRecording}\n                  disabled={isPlaying}\n                >\n                  <Mic size={16} />\n                  <span style={{ marginLeft: '8px' }}>\n                    {isRecording ? 'Stop Recording' : 'Record'}\n                  </span>\n                </button>\n                \n                <button\n                  className=\"duo-button\"\n                  onClick={() => setShowTranscript(!showTranscript)}\n                  style={{\n                    background: showTranscript ? 'linear-gradient(180deg, #58CC02 0%, #4EA500 100%)' : undefined,\n                    boxShadow: showTranscript ? '0 4px 0 #4EA500' : undefined\n                  }}\n                >\n                  {showTranscript ? 'Hide Text' : 'Show Text'}\n                </button>\n                \n                <button className=\"duo-button\" onClick={resetPracticeState}>\n                  <RotateCcw size={16} />\n                  <span style={{ marginLeft: '8px' }}>Reset</span>\n                </button>\n              </div>\n            </>\n          )}\n        </motion.div>\n        \n        <div>\n          {(isRecording || userRecording) && (\n            <motion.div \n              className=\"duolingo-card\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4 }}\n              style={{ marginBottom: '24px' }}\n            >\n              <div className=\"section-title\">\n                <Mic size={20} color={isRecording ? \"#FF4B4B\" : \"#58CC02\"} />\n                {isRecording ? 'Recording Performance...' : 'Your Performance'}\n              </div>\n              \n              <WaveformVisualizer \n                isRecording={isRecording}\n                audioBlob={userRecording}\n              />\n            </motion.div>\n          )}\n          \n          {feedback && (\n            <motion.div \n              className=\"duolingo-card\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5 }}\n            >\n              <div className=\"section-title\">\n                <Star size={20} color=\"#FFC800\" />\n                Performance Feedback\n              </div>\n              \n              <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n                <div style={{ \n                  fontSize: '42px', \n                  fontWeight: '700', \n                  color: feedback.overall >= 85 ? '#58CC02' : feedback.overall >= 70 ? '#FFC800' : '#FF4B4B'\n                }}>\n                  {feedback.overall}%\n                </div>\n                <div style={{ color: '#B7C4CF', fontSize: '16px' }}>{feedback.message}</div>\n              </div>\n              \n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '12px' }}>\n                <div style={{ textAlign: 'center', padding: '12px', background: 'rgba(28, 176, 246, 0.1)', borderRadius: '8px' }}>\n                  <div style={{ fontSize: '20px', fontWeight: '600', color: '#1CB0F6' }}>{feedback.accuracy}%</div>\n                  <div style={{ fontSize: '12px', color: '#B7C4CF' }}>Accent Accuracy</div>\n                </div>\n                <div style={{ textAlign: 'center', padding: '12px', background: 'rgba(88, 204, 2, 0.1)', borderRadius: '8px' }}>\n                  <div style={{ fontSize: '20px', fontWeight: '600', color: '#58CC02' }}>{feedback.rhythm}%</div>\n                  <div style={{ fontSize: '12px', color: '#B7C4CF' }}>Rhythm & Pace</div>\n                </div>\n                <div style={{ textAlign: 'center', padding: '12px', background: 'rgba(255, 200, 0, 0.1)', borderRadius: '8px' }}>\n                  <div style={{ fontSize: '20px', fontWeight: '600', color: '#FFC800' }}>{feedback.emotion}%</div>\n                  <div style={{ fontSize: '12px', color: '#B7C4CF' }}>Emotional Delivery</div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}